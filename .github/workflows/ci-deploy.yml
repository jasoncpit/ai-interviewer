name: CI / CD

on:
  pull_request:
  push:
    branches:
      - main
      - develop

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

env:
  PYTHON_VERSION: "3.11"
  SERVICE_REPO_NAME: prolific-interview-service
  UI_REPO_NAME: prolific-interview-ui

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install . pre-commit

      - name: Run pre-commit (all files)
        run: pre-commit run --all-files

      - name: Run pytest
        run: pytest --maxfail=1 --disable-warnings -q

  deploy-dev:
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    needs: lint-and-test
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_CLUSTER: prolific-interview-dev
      ECS_SERVICE_API: interviewer-service
      ECS_SERVICE_UI: interviewer-ui
      IMAGE_TAG: dev-${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/agent.Dockerfile
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.SERVICE_REPO_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.SERVICE_REPO_NAME }}:dev-latest

      - name: Build and push UI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/streamlit.Dockerfile
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.UI_REPO_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.UI_REPO_NAME }}:dev-latest

      - name: Force ECS service redeploy (API)
        run: |
          aws ecs update-service \
            --cluster "${ECR_CLUSTER}" \
            --service "${ECS_SERVICE_API}" \
            --force-new-deployment

      - name: Force ECS service redeploy (UI)
        run: |
          aws ecs update-service \
            --cluster "${ECR_CLUSTER}" \
            --service "${ECS_SERVICE_UI}" \
            --force-new-deployment

  deploy-prod:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: lint-and-test
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_CLUSTER: prolific-interview-prod
      ECS_SERVICE_API: interviewer-service
      ECS_SERVICE_UI: interviewer-ui
      IMAGE_TAG: prod-${{ github.sha }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_PROD }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/agent.Dockerfile
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.SERVICE_REPO_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.SERVICE_REPO_NAME }}:prod-latest

      - name: Build and push UI image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/streamlit.Dockerfile
          push: true
          tags: |
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.UI_REPO_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.UI_REPO_NAME }}:prod-latest

      - name: Force ECS service redeploy (API)
        run: |
          aws ecs update-service \
            --cluster "${ECR_CLUSTER}" \
            --service "${ECS_SERVICE_API}" \
            --force-new-deployment

      - name: Force ECS service redeploy (UI)
        run: |
          aws ecs update-service \
            --cluster "${ECR_CLUSTER}" \
            --service "${ECS_SERVICE_UI}" \
            --force-new-deployment
